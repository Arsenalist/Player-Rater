// Generated by CoffeeScript 1.6.3
var app, calculatePercentages, client, express, expressValidator, findRemoteAddress, gradeMap, port, rtg, setJsonResponseHeaders;

express = require("express");

app = express();

expressValidator = require('express-validator');

app.use(express.bodyParser());

app.use(expressValidator());

app.use(function(req, res, next) {
  var team_id;
  team_id = req.body.team_id;
  if ((team_id != null) && team_id !== 'tor') {
    return setJsonResponseHeaders(res, "Team not allowed.");
  } else {
    return next();
  }
});

if (process.env.REDISTOGO_URL) {
  rtg = require("url").parse(process.env.REDISTOGO_URL);
  client = require("redis").createClient(rtg.port, rtg.hostname);
  client.auth(rtg.auth.split(":")[1]);
} else {
  client = require("redis").createClient();
}

gradeMap = {
  'tl': 1,
  'jr': 1,
  'th': 1
};

findRemoteAddress = function(req) {
  var list, remote_address;
  remote_address = req.headers["x-forwarded-for"];
  if (remote_address != null) {
    list = remote_address.split(",");
    remote_address = list[0];
  } else {
    remote_address = req.connection.remoteAddress;
  }
  return remote_address.trim();
};

setJsonResponseHeaders = function(res, data) {
  res.header("content-type", "text/javascript");
  res.header("content-length", (data == null ? 0 : data.length));
  return res.end(data);
};

calculatePercentages = function(grade) {
  var total;
  total = grade['tl'] + grade['jr'] + grade['th'];
  grade['tl'] = Math.floor(grade['tl'] * 100 / total);
  grade['jr'] = Math.floor(grade['jr'] * 100 / total);
  grade['th'] = Math.floor(grade['th'] * 100 / total);
  return grade;
};

app.get("/mediator.html", function(req, res) {
  return res.sendfile("./mediator.html");
});

app.get("/client.min.js", function(req, res) {
  return res.sendfile("./client.min.js");
});

app.get("/mediator.min.js", function(req, res) {
  return res.sendfile("./mediator.min.js");
});

app.post("/rating", function(req, res) {
  var game_id, game_key_for_expiry, ip_address, team_id;
  team_id = req.body.team_id;
  game_id = req.body.game_id;
  ip_address = findRemoteAddress(req);
  game_key_for_expiry = "user_votes:" + game_id + ":" + team_id;
  return client.hvals("" + team_id + ":" + game_id, function(err, reply) {
    var active_game_key, ind, json, multi, r, results, user_vote_key, _i, _j, _len, _len1;
    results = new Array();
    for (_i = 0, _len = reply.length; _i < _len; _i++) {
      r = reply[_i];
      json = JSON.parse(r);
      results.push(calculatePercentages(json));
    }
    multi = client.multi();
    active_game_key = "active_game:" + game_id;
    multi.exists(active_game_key);
    for (ind = _j = 0, _len1 = results.length; _j < _len1; ind = ++_j) {
      r = results[ind];
      user_vote_key = "" + ip_address + ":" + game_id + ":" + r.player_id;
      multi.hexists(game_key_for_expiry, user_vote_key);
    }
    return multi.exec(function(err, replies) {
      var allow_game_voting, i, result_replies, _k, _len2;
      if (err != null) {
        console.log(err);
      }
      allow_game_voting = replies[0] === 1 || replies.length === 1;
      result_replies = replies.slice(1);
      for (i = _k = 0, _len2 = result_replies.length; _k < _len2; i = ++_k) {
        r = result_replies[i];
        results[i]["allow_voting"] = result_replies[i] === 0;
      }
      results = JSON.stringify({
        "allow_game_voting": allow_game_voting,
        "grades": results
      });
      return setJsonResponseHeaders(res, results);
    });
  });
});

app.post("/vote", function(req, res) {
  var active_game_key, errors, game_id, game_key_for_expiry, grade, ip_address, outer_multi, player_id, player_key, team_id, user_vote_key;
  req.checkBody('team_id', 'Invalid Team ID').notEmpty();
  req.checkBody('game_id', 'Invalid Game ID').notEmpty().isInt();
  req.checkBody('player_id', 'Invalid Player ID').notEmpty();
  req.checkBody('player_grade', 'Invalid Player Grade').notEmpty();
  errors = req.validationErrors();
  if (errors) {
    res.status(400);
    setJsonResponseHeaders(res, JSON.stringify(errors));
    return;
  }
  team_id = req.body.team_id;
  game_id = req.body.game_id;
  player_id = req.body.player_id;
  grade = req.body.player_grade;
  ip_address = findRemoteAddress(req);
  if (!grade in gradeMap) {
    res.status(506);
    setJsonResponseHeaders(res, "Invalid grade.");
    return;
  }
  console.log("Game: " + game_id + ", Player: " + player_id + ", Grade: " + grade + ", Team: " + team_id);
  game_key_for_expiry = "user_votes:" + game_id + ":" + team_id;
  user_vote_key = "" + ip_address + ":" + game_id + ":" + player_id;
  player_key = "" + team_id + ":" + game_id + ":" + player_id;
  active_game_key = "active_game:" + game_id;
  outer_multi = client.multi();
  outer_multi.get(active_game_key);
  outer_multi.hexists(game_key_for_expiry, user_vote_key);
  outer_multi.hset(game_key_for_expiry, user_vote_key, grade);
  outer_multi.hget("game_player_grade", player_key);
  outer_multi.expire(game_key_for_expiry, 86400);
  return outer_multi.exec(function(err, replies) {
    var average, count, game_enabled, has_voted, new_average, new_stored_grade, set_multi, stored_grade;
    count = average = new_average = 0;
    game_enabled = !!replies[0];
    has_voted = !!replies[1];
    stored_grade = (replies[3] != null) ? JSON.parse(replies[3]) : {
      tl: 0,
      jr: 0,
      th: 0
    };
    if (has_voted) {
      res.status(506);
      setJsonResponseHeaders(res, "Already voted.");
      return;
    }
    if (!game_enabled && count > 0) {
      res.status(506);
      setJsonResponseHeaders(res, "Game expired.");
      return;
    } else if (count === 0) {
      client.set(active_game_key, 1);
      client.expire(active_game_key, 86400);
    }
    set_multi = client.multi();
    stored_grade[grade] = stored_grade[grade] + 1;
    stored_grade['player_id'] = player_id;
    new_stored_grade = JSON.stringify(stored_grade);
    set_multi.hset("game_player_grade", player_key, new_stored_grade);
    set_multi.hset("" + team_id + ":" + game_id, player_id, new_stored_grade);
    return set_multi.exec(function(err, replies) {
      if (err != null) {
        console.log(err);
      }
      return setJsonResponseHeaders(res, JSON.stringify(calculatePercentages(stored_grade)));
    });
  });
});

port = process.env.PORT || 3000;

app.listen(port);

console.log("Listening on port " + port);
